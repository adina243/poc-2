# NecroBrowser configuration

version = 2.0

debug = false

[platform]
    # supported platforms: freebsd, linux, darwin
    type = "linux"

    # The full path to Chromium or Chrome executable
    puppetPath = "/usr/bin/chromium"

    # NOTE puppetPath is needed only on FreeBSD
    # make sure you have the Chromium binary
    # as /usr/bin/chromium-browser and when installing puppeteer
    # prefix it with PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

    extrusionPath = "./extrusion"

    # this is where all task profiles are kept, like:
    # ./profiles/vOkg6KfnP
    profilesPath = "./profiles"

    # listening address and port for the API
    host  = "0.0.0.0"
    port  = 3000

[cluster]
    # supported concurrency: browser, page
    # the safest is to run each task in its own browser
    # but in cases where you prefer opening a single browser
    # and tasks in their own incognito tab, use page
    concurrency = "necro"

    # how many sessions to process simultaneously
    # for max performances: number or cores / 2
    poolSize = 2

    # after how many seconds is the task timing out
    # 2 minutes are usually enough for long-term tasks
    # increase this if your tasks are really long running
    taskTimeout = 360

    # page options
    [cluster.page]
        # browser window size
        windowSize = "1600,1200"

        # page scale factor (zoom level)
        # 1.5 == 150% useful when using headless=false and large screen resolutions above 2K
        scaleFactor = 1

[necro]
    # non-headless means normal chromium GUI
    # in production, and in general unless you encouter headless bugs, you
    # should always use headless = true
    headless = false

    # each submitted task is kept in redis, so we can keep the session
    # alive by just doing a GET on the task fixSession url
    # by default sessions are kept alive every 5 minutes
    [necro.keepalive]
        enabled = true
        delay = 300

    # if you need to upstream proxy the instrumented browsers, here you define it
    # NOTE: consider using a VPN tunnel like Wireguard or IPSEC to tunnel the necrobrowser
    # traffic back into the Muraena reverse proxy machine (if phishing is your usecase)
    [necro.proxy]
        enabled = false
        url = "http://localhost:9999"
